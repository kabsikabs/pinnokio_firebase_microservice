name: Deploy to ECS (pinnokio_microservice)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: pinnokio_microservice
  ECS_CLUSTER: pinnokio_cluster
  ECS_SERVICE: pinnokio_microservice
  ECS_TASK_FAMILY: pinnokio_microservice
  CONTAINER_NAME: listeners
  IMAGE_TAG: ${{ github.sha }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Render ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-taskdef.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Ensure ECS service exists (create if missing)
        env:
          SUBNET_IDS: ${{ secrets.ECS_SUBNET_IDS }} # comma-separated private subnets
          SECURITY_GROUP_ID: ${{ secrets.ECS_SECURITY_GROUP_ID }}
        run: |
          set -e
          STATUS=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" --query 'services[0].status' --output text || true)
          if [ "$STATUS" = "ACTIVE" ]; then
            echo "Service already exists"
          else
            echo "Creating ECS service $ECS_SERVICE in cluster $ECS_CLUSTER"
            aws ecs create-service \
              --cluster "$ECS_CLUSTER" \
              --service-name "$ECS_SERVICE" \
              --task-definition ${{ env.ECS_TASK_FAMILY }} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$(echo $SUBNET_IDS | sed 's/,/,/g')],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=DISABLED}"
          fi

      - name: Deploy Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true


